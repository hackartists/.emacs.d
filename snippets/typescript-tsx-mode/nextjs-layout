# -*- mode: snippet -*-
# name: nextjs-layout
# --

import { Metadata } from 'next';
import React from 'react';
import Provider from './providers';

export async function generateMetadata(
`(let* ((dirs (split-string (file-name-directory (or (buffer-file-name) "")) "/"))
(nested-dir (nth (- (length dirs) 2) dirs)))
(if (string-match "^\\[\\(.*\\)\\]$" nested-dir)
(format "{params }: {params: Promise<{ %s: number }>}" (match-string 1 nested-dir))
""))`
): Promise<Metadata> {
`(let* ((dirs (split-string (file-name-directory (or (buffer-file-name) "")) "/"))
(nested-dir (nth (- (length dirs) 2) dirs)))
(if (string-match "^\\[\\(.*\\)\\]$" nested-dir)
(format "const { %s } = await params;" (match-string 1 nested-dir))
""))`

  const title = '';
  const description = '';
  const image_url = '';

  return {
    title,
    description,
    openGraph: {
      title,
      description,
      images: [
        {
          url: image_url,
        },
      ],
    },
  };
}


export default async function Layout({
children,
`(let* ((dirs (split-string (file-name-directory (or (buffer-file-name) "")) "/"))
(nested-dir (nth (- (length dirs) 2) dirs)))
(when (string-match-p "^\\[.*\\]$" nested-dir)
"params,"))`
}: {
children: React.ReactNode,
`(let* ((dirs (split-string (file-name-directory (or (buffer-file-name) "")) "/"))
(nested-dir (nth (- (length dirs) 2) dirs)))
(if (string-match "^\\[\\(.*\\)\\]$" nested-dir)
(format "params: Promise<{ %s: number }>" (match-string 1 nested-dir))
""))`
}) {
`(let* ((dirs (split-string (file-name-directory (or (buffer-file-name) "")) "/"))
(nested-dir (nth (- (length dirs) 2) dirs)))
(if (string-match "^\\[\\(.*\\)\\]$" nested-dir)
(format "const { %s } = await params;" (match-string 1 nested-dir))
""))`

return <Provider>{children}</Provider>;
}
