# name: lego-http-entity
# key: entity
# --

const (
      PartitionKey string = "doc_id"
      SortKey = "type"

      DocType$1 = "$4"
)

type rateLimiter interface {
Take(ctx context.Context, weight int64) (func(), error)
}

// $1 ${2:...}
type ${1:EntityName} struct {
entity.${3:Hybrid}Modeler \`json:"-" dynamodbav:"-" redis:"-"\`

  DocID string \`dynamodbav:"doc_id"\`
  Type string \`dynamodbav:"type"\`
  CreatedAt int64 \`dynamodbav:"created_at"\`

limiter rateLimiter
ctx     deftype.Context
  index string \`dynamodbav:"-"\`
//  tableName string \`dynamodbav:"-"\`

  $5
}

func New(ctx deftype.Context, limiter rateLimiter) *$1 {
  ret := &$1{
     Type: DocType$1,
		 limiter: limiter,
		 ctx:     ctx,

  }
  ret.$3Modeler = entity.New$3HTTPEntity(ctx,ret,entity.NewHTTPOption(http.MethodGet, "", ret.handle))

  return ret
}

func (r *$1) handle() (func(), error) {
return r.limiter.Take(r.ctx, 0)
}

func (r *$1) Keys() []deftype.Key {
  return []deftype.Key{{PartitionKey, r.Key()}, {SortKey, DocType$1}}
}

func (r *$1) Key() string {
  key := r.DocID
  if key == "" {
    key = fmt.Sprintf("%s#%s", r.Type, "")
  }

  return key
}

func (r *$1) SetKey(key string) {
  r.DocID = key
}

func (r *$1) IsFilled() bool {
  return r.DocID != "" && r.CreatedAt != 0
}

func (r *$1) Indexing() string {
  return r.index
}

// func (r *$1) Table() string {
//   return r.tableName
// }
