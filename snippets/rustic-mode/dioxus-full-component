# -*- mode: snippet -*-
#name : dioxus-full-component
#key : dioxus-full-component
#contributor : hackartist
# --

#![allow(non_snake_case, dead_code, unused_variables)]
use dioxus::prelude::*;
use dioxus_translate::*;
use by_macros::*;

#[component]
pub fn `(string-inflection-upper-camelcase-function (string-replace ".rs" "" (buffer-name)))`(
lang: Language,
#[props(extends = GlobalAttributes)]
attributes: Vec<Attribute>,
children: Element,
) -> Element {
let ctrl = Controller::new(lang)?;
let tr: `(string-inflection-upper-camelcase-function (string-replace ".rs" "" (buffer-name)))`Translate = translate(&lang);

rsx! {
div { id: "`(string-inflection-kebab-case-function (string-replace ".rs" "" (buffer-name)))`", ..attributes, {tr.title} {children} }
}
}

#[derive(Debug, Clone, Copy, DioxusController)]
pub struct Controller {
#[allow(dead_code)]
lang: Language,
}

impl Controller {
pub fn new(lang: Language) -> std::result::Result<Self, RenderError> {
        let ctrl = Self { lang  };

        Ok(ctrl)
    }
}


translate! {
`(string-inflection-upper-camelcase-function (string-replace ".rs" "" (buffer-name)))`Translate;

    title: {
    ko: "`(string-inflection-upper-camelcase-function (string-replace ".rs" "" (buffer-name)))`",
    en: "`(string-inflection-upper-camelcase-function (string-replace ".rs" "" (buffer-name)))`",
    },
}