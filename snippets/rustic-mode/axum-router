# -*- mode: snippet -*-
#name : axum-router
#key : axum-router
#contributor : hackartist
# --
use by_axum::axum::{
  extract::{Path, Query},
  routing::{get, post},
  Json,
};
use dto::errors::ServiceError;

#[derive(Clone, Debug)]
pub struct ${1:Name}ControllerV1 {
  log: slog::Logger,
};

// NOTE: if already have other pagination, please remove this and use defined one.
#[derive(Debug, serde::Deserialize)]
pub struct Pagination {
page: Option<usize>,
size: Option<usize>,
bookmark: Option<usize>,
}

#[derive(Debug, serde::Deserialize)]
pub struct Create$1Request {
  name: String,
}

#[derive(Debug, serde::Deserialize)]
pub struct Update$1Request {
  name: Option<String>,
}

// NOTE: This is a real model and recommended to be moved to shared_models
#[derive(serde::Deserialize, serde::Serialize, Default)]
pub struct $1 {
  id: String,
  r#type: String,
  crated_at: u64,
  updated_at: u64,
  deleted_at: Option<u64>,

  name: Option<String>,

  // Indexes, if deleted_at is set, all values of indexes must be empty.
  gsi1: String,
  gsi2: String,
}

impl $1ControllerV1 {
    pub fn route() -> Result<by_axum::axum::Router, Box<dyn std::error::Error>> {
    let log = root().new(o!("api-controller" => "$1ControllerV1"));
        let ctrl = $1ControllerV1 {
            log,
        };

        Ok(by_axum::axum::Router::new()
            .route(
                "/:id",
                post(Self::create_${1:$(string-inflection-underscore-function yas-text)})
                .get(Self::get_${1:$(string-inflection-underscore-function yas-text)})
                .delete(Self::delete_${1:$(string-inflection-underscore-function yas-text)})
                .put(Self::update_${1:$(string-inflection-underscore-function yas-text)}),
            ).with_state(ctrl.clone())
            .route("/", get(Self::list_${1:$(string-inflection-underscore-function yas-text)}))).with_state(ctrl.clone())
    }

    pub async fn create_${1:$(string-inflection-underscore-function yas-text)}(
      State(ctrl): State<$1ControllerV1>,
      Path(id): Path<String>,
      Json(body): Json<Create$1Request>,
    ) -> Result<Json<$1>, ServiceError> {
    let log = ctrl.log.new(o!("api" => "create_${1:$(string-inflection-underscore-function yas-text)}"));
  slog::debug!(log, "list_${1:$(string-inflection-underscore-function yas-text)} {:?} {:?}", id, body);
        Ok(Json($1::default()))
    }

    pub async fn update_${1:$(string-inflection-underscore-function yas-text)}(
      State(ctrl): State<$1ControllerV1>,
      Path(id): Path<String>,
      Json(_body): Json<Update$1Request>,
    ) -> Result<(), ServiceError> {
    let log = ctrl.log.new(o!("api" => "update_${1:$(string-inflection-underscore-function yas-text)}"));
    slog::debug!(log, "list_${1:$(string-inflection-underscore-function yas-text)} {:?} {:?}", id, body);
        Ok(())
    }

    pub async fn get_${1:$(string-inflection-underscore-function yas-text)}(
      State(ctrl): State<$1ControllerV1>,
      Path(id): Path<String>,
    ) -> Result<Json<$1>, ServiceError> {
    let log = ctrl.log.new(o!("api" => "get_${1:$(string-inflection-underscore-function yas-text)}"));
    slog::debug!(log, "get_${1:$(string-inflection-underscore-function yas-text)} {:?}", id);
        Ok(Json($1::default()))
    }

    pub async fn delete_${1:$(string-inflection-underscore-function yas-text)}(
      State(ctrl): State<$1ControllerV1>,
      Path(id): Path<String>,
    ) -> Result<(), ServiceError> {
    let log = ctrl.log.new(o!("api" => "delete_${1:$(string-inflection-underscore-function yas-text)}"));
    slog::debug!(log, "delete_${1:$(string-inflection-underscore-function yas-text)} {:?}", id);
    Ok(())
    }

pub async fn list_${1:$(string-inflection-underscore-function yas-text)}(
  State(ctrl): State<$1ControllerV1>,
  Query(pagination): Query<Pagination>
  ) -> Result<Json<CommonQueryResponse<$1>>, ServiceError> {
  let log = ctrl.log.new(o!("api" => "list_${1:$(string-inflection-underscore-function yas-text)}"));
  slog::debug!(log, "list_${1:$(string-inflection-underscore-function yas-text)} {:?}", pagination);

        Ok(Json(CommonQueryResponse::default()))
    }
}
