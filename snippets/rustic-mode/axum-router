# -*- mode: snippet -*-
#name : axum-router
#key : axum-router
#contributor : hackartist
# --
use by_axum::{
aide,
auth::Authorization,
axum::{
        extract::{Path, Query, State},
        routing::{get, post},
        Extension, Json,
    },
};
use dto::*;
use by_types::QueryResponse;

#[derive(
    Debug, Clone, serde::Deserialize, serde::Serialize, schemars::JsonSchema, aide::OperationIo,
)]
pub struct $1Path {
    pub id: i64,
}


#[derive(Clone, Debug)]
pub struct ${1:Name}Controller {
  repo: $1Repository,
}

impl $1Controller {
    pub fn new(pool: sqlx::Pool<sqlx::Postgres>) -> Self {
        let repo = $1::get_repository(pool);

        Self {
            repo,
        }
    }

pub fn route(&self) -> Result<by_axum::axum::Router> {
        Ok(by_axum::axum::Router::new()
            .route(
                "/:id",
               get(Self::get_${1:$(string-inflection-underscore-function yas-text)})
                .post(Self::act_${1:$(string-inflection-underscore-function yas-text)}_by_id),
            ).with_state(self.clone())
            .route("/", post(Self::act_${1:$(string-inflection-underscore-function yas-text)}).get(Self::list_${1:$(string-inflection-underscore-function yas-text)})).with_state(self.clone()))
    }

    pub async fn act_${1:$(string-inflection-underscore-function yas-text)}(
      State(_ctrl): State<$1Controller>,
      Extension(_auth): Extension<Option<Authorization>>,
      Json(body): Json<$1Action>,
    ) -> Result<Json<$1>> {
  tracing::debug!("act_${1:$(string-inflection-underscore-function yas-text)} {:?}", body);
        Ok(Json($1::default()))
    }

    pub async fn act_${1:$(string-inflection-underscore-function yas-text)}_by_id(
      State(_ctrl): State<$1Controller>,
      Extension(_auth): Extension<Option<Authorization>>,
      Path($1Path { id }): Path<$1Path>,
      Json(body): Json<$1ByIdAction>,
    ) -> Result<Json<$1>> {
    tracing::debug!("act_${1:$(string-inflection-underscore-function yas-text)}_by_id {:?} {:?}", id, body);
    Ok(Json($1::default()))
    }

    pub async fn get_${1:$(string-inflection-underscore-function yas-text)}(
      State(_ctrl): State<$1Controller>,
      Extension(_auth): Extension<Option<Authorization>>,
      Path($1Path { id }): Path<$1Path>,
    ) -> Result<Json<$1>> {
    tracing::debug!("get_${1:$(string-inflection-underscore-function yas-text)} {:?}", id);
        Ok(Json($1::default()))
    }

pub async fn list_${1:$(string-inflection-underscore-function yas-text)}(
  State(_ctrl): State<$1Controller>,
  Extension(_auth): Extension<Option<Authorization>>,
  Query(q): Query<$1Param>
  ) -> Result<Json<$1GetResponse>> {
  tracing::debug!("list_${1:$(string-inflection-underscore-function yas-text)} {:?}", q);

      Ok(Json($1GetResponse::Query(QueryResponse::default())))
    }
}
