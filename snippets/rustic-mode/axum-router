# -*- mode: snippet -*-
#name : axum-router
#key : axum-router
#contributor : hackartist
# --
use by_axum::{
    axum::{
        extract::{Path, Query, State},
        routing::{get, post},
        Json,
    },
    log::root,
};
use common_query_response::CommonQueryResponse;
use dto::*;
use slog::o;

#[derive(Clone, Debug)]
pub struct ${1:Name}ControllerV1 {
log: slog::Logger,
}

impl $1ControllerV1 {
    pub fn route() -> Result<by_axum::axum::Router> {
    let log = root().new(o!("api-controller" => "$1ControllerV1"));
        let ctrl = $1ControllerV1 {
            log,
        };

        Ok(by_axum::axum::Router::new()
            .route(
                "/:id",
               get(Self::get_${1:$(string-inflection-underscore-function yas-text)})
                .post(Self::act_${1:$(string-inflection-underscore-function yas-text)}_by_id),
            ).with_state(ctrl.clone())
            .route("/", post(Self::act_${1:$(string-inflection-underscore-function yas-text)}).get(Self::list_${1:$(string-inflection-underscore-function yas-text)})).with_state(ctrl.clone()))
    }

    pub async fn act_${1:$(string-inflection-underscore-function yas-text)}(
      State(ctrl): State<$1ControllerV1>,
      Extension(_sig): Extension<Option<Signature>>,
      Json(body): Json<$1ActionRequest>,
    ) -> Result<Json<$1ActionResponse>> {
    let log = ctrl.log.new(o!("api" => "create_${1:$(string-inflection-underscore-function yas-text)}"));
  slog::debug!(log, "list_${1:$(string-inflection-underscore-function yas-text)} {:?}", body);
        Ok(Json($1ActionResponse::default()))
    }

    pub async fn act_${1:$(string-inflection-underscore-function yas-text)}_by_id(
      State(ctrl): State<$1ControllerV1>,
      Extension(_sig): Extension<Option<Signature>>,
      Path(id): Path<String>,
      Json(body): Json<$1ByIdActionRequest>,
    ) -> Result<$1ByIdActionResponse> {
    let log = ctrl.log.new(o!("api" => "update_${1:$(string-inflection-underscore-function yas-text)}"));
    slog::debug!(log, "list_${1:$(string-inflection-underscore-function yas-text)} {:?} {:?}", id, body);
    Ok($1ByIdActionResponse::default())
    }

    pub async fn get_${1:$(string-inflection-underscore-function yas-text)}(
      State(ctrl): State<$1ControllerV1>,
      Extension(_sig): Extension<Option<Signature>>,
      Path(id): Path<String>,
    ) -> Result<Json<$1>> {
    let log = ctrl.log.new(o!("api" => "get_${1:$(string-inflection-underscore-function yas-text)}"));
    slog::debug!(log, "get_${1:$(string-inflection-underscore-function yas-text)} {:?}", id);
        Ok(Json($1::default()))
    }

pub async fn list_${1:$(string-inflection-underscore-function yas-text)}(
  State(ctrl): State<$1ControllerV1>,
  Extension(_sig): Extension<Option<Signature>>,
  Query(q): Query<PatronQuery>
  ) -> Result<Json<CommonQueryResponse<$1>>> {
  let log = ctrl.log.new(o!("api" => "list_${1:$(string-inflection-underscore-function yas-text)}"));
  slog::debug!(log, "list_${1:$(string-inflection-underscore-function yas-text)} {:?}", q);

        Ok(Json(CommonQueryResponse::default()))
    }
}
