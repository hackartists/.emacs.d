# -*- mode: snippet -*-
#name : axum-router
#key : axum-router
#contributor : hackartist
# --
use bdk::prelude::*;
use by_axum::{
aide,
auth::Authorization,
axum::{
        extract::{Path, Query, State},
        routing::{get, post},
        Extension, Json,
    },
};
use common::*;
use by_types::QueryResponse;
use sqlx::postgres::PgRow;

#[derive(
    Debug, Clone, serde::Deserialize, serde::Serialize, schemars::JsonSchema, aide::OperationIo,
)]
pub struct $1Path {
    pub id: i64,
}


#[derive(Clone, Debug)]
pub struct ${1:Name}Controller {
  repo: $1Repository,
  pool: sqlx::Pool<sqlx::Postgres>,
}

impl $1Controller {
    async fn query(
        &self,
        _auth: Option<Authorization>,
        param: $1Query,
    ) -> Result<QueryResponse<$1Summary>> {
        let mut total_count = 0;
        let items: Vec<$1Summary> = $1Summary::query_builder()
            .limit(param.size())
            .page(param.page())
            .query()
            .map(|row: PgRow| {
                use sqlx::Row;

                total_count = row.try_get("total_count").unwrap_or_default();
                row.into()
            })
            .fetch_all(&self.pool)
            .await?;

        Ok(QueryResponse { total_count, items })
    }

    async fn create(
        &self,
        _auth: Option<Authorization>,
        _param: $1CreateRequest,
    ) -> Result<$1> {
        todo!()
    }

    async fn update(
        &self,
        id: i64,
        auth: Option<Authorization>,
        param: $1UpdateRequest,
    ) -> Result<$1> {
        if auth.is_none() {
            return Err(Error::Unauthorized);
        }

        let res = self.repo.update(id, param.into()).await?;

        Ok(res)
    }

    async fn delete(&self, id: i64, auth: Option<Authorization>) -> Result<$1> {
        if auth.is_none() {
            return Err(Error::Unauthorized);
        }

        let res = self.repo.delete(id).await?;

        Ok(res)
    }

    // async fn run_read_action(
    //     &self,
    //     _auth: Option<Authorization>,
    //     $1ReadAction { action, .. }: $1ReadAction,
    // ) -> Result<$1> {
    //     todo!()
    // }

}

impl $1Controller {
    pub fn new(pool: sqlx::Pool<sqlx::Postgres>) -> Self {
        let repo = $1::get_repository(pool.clone());

        Self {
            repo,
            pool,
        }
    }

pub fn route(&self) -> Result<by_axum::axum::Router> {
        Ok(by_axum::axum::Router::new()
            .route(
                "/:id",
               get(Self::get_${1:$(string-inflection-underscore-function yas-text)}_by_id)
                .post(Self::act_${1:$(string-inflection-underscore-function yas-text)}_by_id),
            ).with_state(self.clone())
            .route("/", post(Self::act_${1:$(string-inflection-underscore-function yas-text)}).get(Self::get_${1:$(string-inflection-underscore-function yas-text)})).with_state(self.clone()))
    }

    pub async fn act_${1:$(string-inflection-underscore-function yas-text)}(
      State(ctrl): State<$1Controller>,
      Extension(auth): Extension<Option<Authorization>>,
      Json(body): Json<$1Action>,
    ) -> Result<Json<$1>> {
  tracing::debug!("act_${1:$(string-inflection-underscore-function yas-text)} {:?}", body);
  match body {
            $1Action::Create(param) => {
                let res = ctrl.create(auth, param).await?;
                Ok(Json(res))
            }
        }
}

    pub async fn act_${1:$(string-inflection-underscore-function yas-text)}_by_id(
      State(ctrl): State<$1Controller>,
      Extension(auth): Extension<Option<Authorization>>,
      Path($1Path { id }): Path<$1Path>,
      Json(body): Json<$1ByIdAction>,
    ) -> Result<Json<$1>> {
    tracing::debug!("act_${1:$(string-inflection-underscore-function yas-text)}_by_id {:?} {:?}", id, body);
    match body {
            $1ByIdAction::Update(param) => {
                let res = ctrl.update(id, auth, param).await?;
                Ok(Json(res))
            }
            $1ByIdAction::Delete(_) => {
                let res = ctrl.delete(id, auth).await?;
                Ok(Json(res))
            }
        }
    }

    pub async fn get_${1:$(string-inflection-underscore-function yas-text)}_by_id(
      State(ctrl): State<$1Controller>,
      Extension(_auth): Extension<Option<Authorization>>,
      Path($1Path { id }): Path<$1Path>,
    ) -> Result<Json<$1>> {
    tracing::debug!("get_${1:$(string-inflection-underscore-function yas-text)} {:?}", id);

        Ok(Json(
            $1::query_builder()
                .id_equals(id)
                .query()
                .map($1::from)
                .fetch_one(&ctrl.pool)
                .await?,
        ))
    }

pub async fn get_${1:$(string-inflection-underscore-function yas-text)}(
  State(ctrl): State<$1Controller>,
  Extension(auth): Extension<Option<Authorization>>,
  Query(q): Query<$1Param>
  ) -> Result<Json<$1GetResponse>> {
  tracing::debug!("list_${1:$(string-inflection-underscore-function yas-text)} {:?}", q);

      match q {
            $1Param::Query(param) => Ok(Json($1GetResponse::Query(
                ctrl.query(auth, param).await?,
            ))),
            // $1Param::Read(param)
            //     if param.action == Some($1ReadActionType::ActionType) =>
            // {
            //     let res = ctrl.run_read_action(auth, param).await?;
            //     Ok(Json($1GetResponse::Read(res)))
            // }

        }
    }
}
