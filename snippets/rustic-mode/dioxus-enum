# -*- mode: snippet -*-
#name : dioxus-enum
#key : dioxus-enum
#contributor : hackartist
# --
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub enum ${1:EnumName} {
    #[serde(rename = "${2:$(string-inflection-kebab-case-function yas-text)}")]
    ${2:VariantName},
}

impl Display for $1 {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
        $1::$2 => write!(f, "${2:$(string-inflection-kebab-case-function yas-text)}"),
        }
    }
}

impl FromStr for $1 {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "${2:$(string-inflection-kebab-case-function yas-text)}" => Ok($1::$2),
            _ => Err(format!("Invalid type: {}", s)),
        }
    }
}

impl $1 {
    pub fn to_string(&self) -> String {
        match self {
            $1::$2 => "${2:$(string-inflection-kebab-case-function yas-text)}".to_string(),
        }
    }
}
