# -*- mode: snippet -*-
#name : axum-child-router
#key : axum-child-router
#contributor : hackartist
# --
use by_axum::{
auth::Authorization,
axum::{
        extract::{Path, Query, State},
        routing::{get, post},
        Extension, Json,
    },
};
use dto::*;

#[derive(Clone, Debug)]
pub struct ${1:Name}ControllerV1 {
  repo: $1Repository,
}

impl $1ControllerV1 {
pub async fn route(pool: sqlx::Pool<sqlx::Postgres>) -> Result<by_axum::axum::Router> {
    let repo = $1::get_repository(pool);

        repo.create_table().await?;

        let ctrl = $1ControllerV1 { repo };

        Ok(by_axum::axum::Router::new()
            .route(
                "/:id",
               get(Self::get_${1:$(string-inflection-underscore-function yas-text)})
                .post(Self::act_${1:$(string-inflection-underscore-function yas-text)}_by_id),
            ).with_state(ctrl.clone())
            .route("/", post(Self::act_${1:$(string-inflection-underscore-function yas-text)}).get(Self::list_${1:$(string-inflection-underscore-function yas-text)})).with_state(ctrl.clone()))
    }

    pub async fn act_${1:$(string-inflection-underscore-function yas-text)}(
      State(_ctrl): State<$1ControllerV1>,
      Path(parent_id): Path<String>,
      Extension(_auth): Extension<Option<Authorization>>,
      Json(body): Json<$1Action>,
    ) -> Result<Json<$1>> {
  tracing::debug!("act_${1:$(string-inflection-underscore-function yas-text)} {:?}", body);
        Ok(Json($1::default()))
    }

    pub async fn act_${1:$(string-inflection-underscore-function yas-text)}_by_id(
      State(_ctrl): State<$1ControllerV1>,
      Extension(_auth): Extension<Option<Authorization>>,
      Path((parent_id, id)): Path<(String, String)>,
      Json(body): Json<$1ByIdAction>,
    ) -> Result<Json<$1>> {
    tracing::debug!("act_${1:$(string-inflection-underscore-function yas-text)}_by_id {:?} {:?}", id, body);
    Ok(Json($1::default()))
    }

    pub async fn get_${1:$(string-inflection-underscore-function yas-text)}(
      State(_ctrl): State<$1ControllerV1>,
      Extension(_auth): Extension<Option<Authorization>>,
      Path((parent_id, id)): Path<(String, String)>,
    ) -> Result<Json<$1>> {
    tracing::debug!("get_${1:$(string-inflection-underscore-function yas-text)} {:?}", id);
        Ok(Json($1::default()))
    }

pub async fn list_${1:$(string-inflection-underscore-function yas-text)}(
  State(_ctrl): State<$1ControllerV1>,
  Path(parent_id): Path<String>,
  Extension(_auth): Extension<Option<Authorization>>,
  Query(q): Query<$1Query>
  ) -> Result<Json<$1GetResponse>> {
  tracing::debug!("list_${1:$(string-inflection-underscore-function yas-text)} {:?}", q);

      Ok(Json($1GetResponse::Query(QueryResponse::default())))
    }
}
