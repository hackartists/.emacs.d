# -*- mode: snippet -*-
#name : dioxus-controller
#key : dioxus-controller
#contributor : hackartist
# --
#![allow(non_snake_case)]
use dioxus::prelude::*;

#[derive(Debug, Clone, Copy)]
pub struct Controller {
    pub data: Signal<Vec<String>>,
}

impl Controller {
    pub fn add_item(&mut self, item: String) {
        let mut data = self.data.write();
        data.push(item);
    }

    pub fn remove_item(&mut self, index: usize) {
        let mut data = self.data.write();
        data.remove(index);
    }
}

pub fn new() -> Controller {
    let mut ctrl = Controller {
        data: use_signal(|| vec![]),
    };
    use_context_provider(|| ctrl);

    let _ = use_server_future(move || async move {
        // TODO: implement init state logic from server
        // if let Ok(res) = get_data().await {
        //     ctrl.data.set(res.data);
        // };
    });

    ctrl
}

#[allow(dead_code)]
pub fn use_controller() -> Controller {
    use_context()
}