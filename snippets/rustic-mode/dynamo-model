# -*- mode: snippet -*-
# name: dynamo-model
# --

use crate::types::*;
use bdk::prelude::*;

#[derive(Debug, Clone, serde::Serialize, serde::Deserialize, DynamoEntity, Default, schemars::JsonSchema, aide::OperationIo)]
pub struct `(string-inflection-upper-camelcase-function (string-replace ".rs" "" (buffer-name)))` {
    pub pk: Partition,
    pub sk: EntityType,

    #[dynamo(prefix = "TS", index = "gsi1", sk)]
    pub created_at: i64,
    pub updated_at: i64,

    #[dynamo(prefix = "INFO", name = "find_by_info", index = "gsi1", pk)]
    pub info: String,
}

impl `(string-inflection-upper-camelcase-function (string-replace ".rs" "" (buffer-name)))` {
    pub fn new(info: String) -> Self {
        let uid = uuid::Uuid::new_v4().to_string();
        let created_at = chrono::Utc::now().timestamp_micros();

        Self {
        pk: Partition::`(string-inflection-upper-camelcase-function (string-replace ".rs" "" (buffer-name)))`$0(uid),
        sk: EntityType::`(string-inflection-upper-camelcase-function (string-replace ".rs" "" (buffer-name)))`,
            created_at,
            updated_at: created_at,
            info,
        }
    }
}