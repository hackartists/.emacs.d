(setq hackartist-packages '())
(setq hackartist-layers '())
(setq hackartist-apps '())
(setq dotspacemacs-additional-packages '())

(defun core/app/load-apps ()
  (let ((res)
        (app-dir (concat emacs-start-directory "/apps")))
    (let (
          (app-files (append (directory-files-recursively app-dir ".*\.el$")))
          (apps (nthcdr 2 (directory-files app-dir))))
      (dolist (el app-files res)	      
        (load-file el))
      (dolist (el apps res)
        (add-to-list 'hackartist-apps el)
        (core/app/app-deps el)
        ;; (core/app/init-app el)
        )
      (dolist (el hackartist-packages) (add-to-list 'dotspacemacs-additional-packages el))
      )))

(defun core/app/app-deps (pkg)
  (let* ((pkgs (intern (concat "hackartist-" (concat pkg "-packages"))))
         (lys (intern (concat "hackartist-" (concat pkg "-layers"))))
         )
    (condition-case nil
        (dolist (el (symbol-value pkgs)) (add-to-list 'hackartist-packages el))
      (error "not define packages"))
    (condition-case nil
        (dolist (el (symbol-value lys)) (add-to-list 'hackartist-layers el))
      (error "not define layers"))))

(defun core/app/init-apps ()
  (dolist (el hackartist-apps res)
    (core/app/init-app el)))

(defun core/app/init-app (app)
  (let ((init (intern (concat "hackartist/" (concat app "/init"))))
        (config (intern (concat "hackartist/" (concat app "/config"))))
        (bindings (intern (concat "hackartist/" (concat app "/bindings")))))
    (funcall init)
    (funcall config)
    (funcall bindings)))
